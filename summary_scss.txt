* Nested definitions:
  .app{
    height:100vh;
    .sections{ //in jsx file, they are also nested
      width:100%;
      height:calc(100vh);
      background-color: lightsalmon;
   }
   
    * { // for every component inside .app
       width:100wh;
       height:calc(100vh);
    }
}

* Arrange compoennts by z index:
  z-index:2; //if this is the biggest value, it's on top of others
  
* Independaent component:  position:fixed; top:0;   (position isn't correlated with other components')

* Add src/global.scss:
  $mainColor:#15023a;
  In calling scss file:
  @import '../../global.scss';
  > = {height: $mainColor; } 
  
* //arrange sub-components in the default direction (horizontally)
  dislay:flex;  
  flex-direction:column;

* Align sub-components:
  align-items:center;
  justify-content:space-between;  

* Inheritance:
  color:inherit;  //take color from parent  
  
* cursor:pointer;

* More than 1 className:
  <div className='topBar active'>
  &.active{ 
    background-color: $mainColor;
    color:white;
  }  
  
* Transform (sway this component by 45 degrees):
  transform: rotate(45deg);
  
  
* Animate a component (when there a change in the component's graphics):
  transition:all 2s ease;  


* Designing the Xth child of a given component
 span{
      &:first-child{background-color: white; transform: rotate(45deg);}
      &:nth-child(2){opacity: 0;}
      &:last-child{background-color: white;} 
     } 

* State management:
  import {useState} from 'react';
  const [menuOpen, setMenuOpen] = useState(false);  
  
  
* onHover event:
   &:hover{font-weight: 800;}  
   
* Hide overflowing parts of elements  
  overflow:hidden

* Push child to the end:
  align-items:flex-end;

* Align compopnent to the left of its parent:
  float: left  
  
* position: absolute;  //relative to the paret component. The parent must have position:relative

* Animate component: 
 img{
      width:30px;
      height:30px;
      animation: arrowBlink 2s infinite;
     }
  @keyframes arrowBlink {
       100%{
           opacity:0;
           }
  }
  
* Go to a new line, if no space left:
 flex-wrap:wrap;

* Populate lists:
  <ul>
   {list.map((item)=>(<PortfolioList title={item.title} />))}
  </ul>

  const PortfolioList = ({title}) => {
  return (
    <li className='portfolioList'>{title}</li>
  )
 }  
    
  
  
* Positioning child component (if display:flex):
  display: flex;
  align-items: center;   //cross axis
  justify-content: center;  //main axis
  
* Decorating a text:
   text-decoration: underline;  